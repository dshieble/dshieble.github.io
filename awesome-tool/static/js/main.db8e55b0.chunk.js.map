{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","Response","response","Screen","state","screen","console","log","this","setState","$","getJSON","done","handleResponse","handleClick","persons","results","map","item","i","name","first","cell","email","id","renderButton","renderResponse","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qPASA,SAASA,EAAOC,GAEd,OAQE,aAPA,CAOA,UAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACI,eAKR,SAASC,EAASH,GAGhB,OACE,qBAAKC,UAAU,WAAf,SAA2BD,EAAMI,W,IAK/BC,E,kDAGJ,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CAACF,SAAU,MAFP,E,kDAMnB,SAAeG,EAAQH,GAOrB,OANAI,QAAQC,IAAIF,GACZC,QAAQC,IAAIC,MACZF,QAAQC,IAAI,iBAGZF,EAAOI,SAAS,CAAEP,SAAUA,IACrBA,I,yBAGT,WAAe,IAAD,OACZQ,IAAEC,QAAQ,8BACPC,MAAK,SAACV,GAAD,OAAc,EAAKW,eAAe,EAAMX,Q,0BAGlD,WAAgB,IAAD,OACb,OAAO,cAACL,EAAD,CACLG,QAAS,kBAAM,EAAKc,mB,4BAIxB,WAGE,IAAIZ,EACJ,GAAIM,KAAKJ,MAAMF,SAAU,CACvBI,QAAQC,IAAI,WACZ,IAAMQ,EAAUP,KAAKJ,MAAMF,SAASc,QAAQC,KAAI,SAACC,EAAMC,GAAP,OAE9C,aADA,CACA,eACA,gCACE,6BAAMD,EAAKE,KAAKC,QAChB,iCAAQH,EAAKI,KAAb,KAAuBJ,EAAKK,aAHrB,UAAYJ,MAQvBb,QAAQC,IAAIQ,GAEZb,EACE,qBAAKsB,GAAG,iBAAiBzB,UAAU,yBAAnC,SACE,qBAAKA,UAAU,aAAf,SAA8BgB,WAMlCT,QAAQC,IAAI,eACZL,EAAW,KAGb,OAAO,cAACD,EAAD,CACHC,SAAUA,M,oBAIhB,WAEE,OADAI,QAAQC,IAAI,aAEV,gCACE,qBAAKR,UAAU,MAAf,SACGS,KAAKiB,iBAER,qBAAK1B,UAAU,eAAf,SACGS,KAAKkB,0B,GAzEKC,IAAMC,WAmF3BC,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.db8e55b0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport $ from 'jquery';\n\n\n\n// We can switch the Square component to a function that just renders directly. This still creates a component I believe, just under the hood\nfunction Button(props) {\n  // the function component just returns the DOM element to render\n  return (\n    // \n    // Notes on differences between class and function components\n    // (1)\n    //   - There is no \"this\" required to reference props, since this is just a function\n    // (2)\n    //  - For class component we write onClick={() => this.props.onClick}\n    //  - For function component we write onClick={props.onClick}\n    <button className=\"button\" onClick={props.onClick}>\n       {\"Click Here\"}\n    </button>\n  );\n}\n\nfunction Response(props) {\n  // the function component just returns the DOM element to render\n\n  return (\n    <div className=\"response\">{props.response}</div>\n  );\n}\n\n\nclass Screen extends React.Component {\n  \"use strict\"\n\n  constructor(props) {\n    super(props);\n    this.state = {response: null};\n  }\n\n\n  handleResponse(screen, response) {\n    console.log(screen);\n    console.log(this);\n    console.log(\"setting state\");\n\n    // NOTE: If we write this method to only accept the response argument, then `this` will point at the response object. We need to pass the screen in manually. \n    screen.setState({ response: response });\n    return response;\n  }\n\n  handleClick() {\n    $.getJSON('https://randomuser.me/api/')\n      .done((response) => this.handleResponse(this, response));\n  }\n\n  renderButton() {\n    return <Button\n      onClick={() => this.handleClick()}\n      />;\n  }\n\n  renderResponse() {\n    // console.log(this.state.response)\n\n    var response;\n    if (this.state.response) {\n      console.log(\"defined\")\n      const persons = this.state.response.results.map((item, i) => (\n        // NOTE: We need to wrap these within <li><\\li> and add a key because of https://sentry.io/answers/unique-key-prop/\n        <li key={\"person_\" + i}> \n        <div>\n          <h1>{ item.name.first }</h1>\n          <span>{ item.cell }, { item.email }</span>\n        </div>\n        </li>\n      ));\n\n      console.log(persons);\n\n      response = (\n        <div id=\"layout-content\" className=\"layout-content-wrapper\">\n          <div className=\"panel-list\">{ persons }</div>\n        </div>\n      );\n\n      // response = JSON.stringify(this.state.response);\n    } else {\n      console.log(\"not defined\")\n      response = null;\n    }\n\n    return <Response\n        response={response}\n        />;\n  }\n\n  render() {\n    console.log(\"rendering\");\n    return (\n      <div>\n        <div className=\"box\">\n          {this.renderButton()}\n        </div>\n        <div className=\"response-box\">\n          {this.renderResponse()}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n// ========================================\n\nReactDOM.render(\n  <Screen />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}