{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"4OAmBA,SAASA,EAAOC,GAEd,OAQE,aAPA,CAOA,UAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,Q,IAKPC,E,kDAEJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,+CASnB,SAAYC,GAEV,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAG9BC,EAAgBP,IAAaA,EAAQI,KAExCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IAGxCE,KAAKG,SAAS,CACZR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,0BAK3B,SAAaC,GAAI,IAAD,OACd,OAAO,cAACX,EAAD,CACLI,MAAOQ,KAAKN,MAAMC,QAAQI,GAE1BR,QAAS,kBAAM,EAAKa,YAAYL,Q,oBAIpC,WACE,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAQ1C,OALEU,EADEC,EACO,WAAaA,EAEb,iBAAmBN,KAAKN,MAAMI,QAAU,IAAM,KAIvD,gCACE,qBAAKR,UAAU,SAAf,SAAyBe,IACzB,sBAAKf,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAErB,sBAAKjB,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAErB,sBAAKjB,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,a,GA7DTC,IAAMC,WAoEpBC,E,4JACJ,WACE,OACE,sBAAKpB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,MAEF,sBAAKH,UAAU,YAAf,UACE,wBACA,iC,GATSkB,IAAMC,WAiBzB,SAASP,EAAgBP,GAWvB,IAVA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CACrC,kBAAkBY,EAAMZ,GAAxB,GAAOc,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIpB,EAAQkB,IACRlB,EAAQkB,KAAOlB,EAAQmB,IACvBnB,EAAQkB,KAAOlB,EAAQoB,GACzB,OAAOpB,EAAQkB,GAGnB,OAAO,KAKTG,IAASC,OACP,cAACP,EAAD,IACAQ,SAASC,eAAe,W","file":"static/js/main.ecf53aa3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// class Square extends React.Component {\n\n//   render() {\n//     return (\n//       // DOM button element, onClick is a reserved method\n//       <button className=\"square\" \n//         // lambda syntax\n//         onClick={() => this.props.onClick()}>\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n// We can switch the Square component to a function that just renders directly. This still creates a component I believe, just under the hood\nfunction Square(props) {\n  // the function component just returns the DOM element to render\n  return (\n    // \n    // Notes on differences between class and function components\n    // (1)\n    //   - There is no \"this\" required to reference props, since this is just a function\n    // (2)\n    //  - For class component we write onClick={() => this.props.onClick}\n    //  - For function component we write onClick={props.onClick}\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n  }\n\n\n  handleClick(i) {\n    // copy the squares attribute\n    const squares = this.state.squares.slice();\n\n    // Don't do anything if there is already a winner or this square is already taken\n    if (!calculateWinner(squares) && !squares[i]) {\n      // edit the cop/y\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n      // Set the this.state attribute manually with a setter. This is based on good React practice (don't mutate properties directly)\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext,\n      })\n    }\n  }\n\n  renderSquare(i) {\n    return <Square\n      value={this.state.squares[i]}\n      // this is just the name of the method that we are creating Square with, this does not need to be called onClick\n      onClick={() => this.handleClick(i)}\n      />;\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}