I"b&<script> 
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-82391879-1', 'auto');
  ga('send', 'pageview');

</script>

<p>In this post I’m going to share a simple method that will turn any list comprehension into a high performance parallel job with a progress bar.</p>

<h3 id="tqdm">tqdm</h3>

<p>If you are a python programmer who hasn’t worked with tqdm before, I’m about to change your life. With just 6 characters, tqdm adds a helpful and non-obstrusive progress bar to any python iterator. Try this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
		<span class="c1">#do stuff
</span></code></pre></div></div>

<p>You should see a progress bar like this:</p>

<p><img src="/img/Progress_Bar.png" alt="Progress Bar" /></p>

<p>You can download tqdm <a href="https://github.com/noamraph/tqdm">here</a>.</p>

<h3 id="concurrentfutures">concurrent.futures</h3>

<p><a href="https://docs.python.org/3/library/concurrent.futures.html">concurrent.futures</a> is python’s standard module for asyncronous tasks. It gives you access to executor classes that you can use to manage threads and processes. If you’re not familiar with concurrent.futures, you can find a pretty good tutorial <a href="http://masnun.com/2016/03/29/python-a-quick-introduction-to-the-concurrent-futures-module.html">here</a>.</p>

<h3 id="putting-them-together">Putting them together</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ProcessPoolExecutor</span><span class="p">,</span> <span class="n">as_completed</span>

<span class="k">def</span> <span class="nf">parallel_process</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">function</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">use_kwargs</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">front_num</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="s">"""
        A parallel version of the map function with a progress bar. 

        Args:
            array (array-like): An array to iterate over.
            function (function): A python function to apply to the elements of array
            n_jobs (int, default=16): The number of cores to use
            use_kwargs (boolean, default=False): Whether to consider the elements of array as dictionaries of 
                keyword arguments to function 
            front_num (int, default=3): The number of iterations to run serially before kicking off the parallel job. 
                Useful for catching bugs
        Returns:
            [function(array[0]), function(array[1]), ...]
    """</span>
    <span class="c1">#We run the first few iterations serially to catch bugs
</span>    <span class="k">if</span> <span class="n">front_num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">front</span> <span class="o">=</span> <span class="p">[</span><span class="n">function</span><span class="p">(</span><span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="k">if</span> <span class="n">use_kwargs</span> <span class="k">else</span> <span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">array</span><span class="p">[:</span><span class="n">front_num</span><span class="p">]]</span>
    <span class="c1">#If we set n_jobs to 1, just run a list comprehension. This is useful for benchmarking and debugging.
</span>    <span class="k">if</span> <span class="n">n_jobs</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">front</span> <span class="o">+</span> <span class="p">[</span><span class="n">function</span><span class="p">(</span><span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="k">if</span> <span class="n">use_kwargs</span> <span class="k">else</span> <span class="n">function</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">front_num</span><span class="p">:])]</span>
    <span class="c1">#Assemble the workers
</span>    <span class="k">with</span> <span class="n">ProcessPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="n">n_jobs</span><span class="p">)</span> <span class="k">as</span> <span class="n">pool</span><span class="p">:</span>
        <span class="c1">#Pass the elements of array into function
</span>        <span class="k">if</span> <span class="n">use_kwargs</span><span class="p">:</span>
            <span class="n">futures</span> <span class="o">=</span> <span class="p">[</span><span class="n">pool</span><span class="p">.</span><span class="n">submit</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">array</span><span class="p">[</span><span class="n">front_num</span><span class="p">:]]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">futures</span> <span class="o">=</span> <span class="p">[</span><span class="n">pool</span><span class="p">.</span><span class="n">submit</span><span class="p">(</span><span class="n">function</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">array</span><span class="p">[</span><span class="n">front_num</span><span class="p">:]]</span>
        <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'total'</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">futures</span><span class="p">),</span>
            <span class="s">'unit'</span><span class="p">:</span> <span class="s">'it'</span><span class="p">,</span>
            <span class="s">'unit_scale'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
            <span class="s">'leave'</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">}</span>
        <span class="c1">#Print out the progress as tasks complete
</span>        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">as_completed</span><span class="p">(</span><span class="n">futures</span><span class="p">),</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">pass</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1">#Get the results from the futures. 
</span>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">futures</span><span class="p">)):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">future</span><span class="p">.</span><span class="n">result</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">front</span> <span class="o">+</span> <span class="n">out</span>
</code></pre></div></div>

<p>The syntax for <code class="language-plaintext highlighter-rouge">parallel_process</code> is identical to the syntax for python’s <code class="language-plaintext highlighter-rouge">map</code> function, but it is more customizable. The most basic use is:</p>

<p><img src="/img/basic_progress.png" alt="A basic progress bar" /></p>

<p>We can also specify additional arguments to the function</p>

<p><img src="/img/fancy_progress.png" alt="A fancy progress bar" /></p>
:ET