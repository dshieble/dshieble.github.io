I"ß<script> 
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-82391879-1', 'auto');
  ga('send', 'pageview');

</script>

<!--
https://proceedings.neurips.cc/paper/2015/file/86df7dcfd896fcaf2674f757a2463eba-Paper.pdf
TODO: 

-->

<blockquote>
  <p>This post is part two in a three part series on the challenges of improving a production machine learning system. Find part one <a href="https://danshiebler.com/2021-11-06-ml-systems-1">here</a>.</p>
</blockquote>

<h2 id="adding-new-features-or-improving-existing-features">Adding new features or improving existing features</h2>

<p>A machine learning model is only as powerful as the features it is trained with. As a result, one of the most important parts of improving a machine learning system is improving the core feature set. However, experimenting with new features or feature improvements presents a unique set of challenges.</p>

<h4 id="online-version-vs-offline-version">Online version vs Offline version</h4>

<p>Probably the most straightforward challenge of adding new features is offline/online mismatch. This problem arises when the processes by which features are derived from raw data are different between the systems for model training and model serving.</p>

<p>This problem is particular common when a model is trained and deployed in different environments. For example, suppose we train a model in a notebook on a cloud machine but deploy it to run in a user‚Äôs browser. The feature computation code in these two settings may be written in different languages, and slight differences in serialization, tokenization, rounding, etc are very common.</p>

<p><img src="/img/online-offline-features.png" alt="Online and Offline Features can be filled differently. Figure from draw.io" /></p>

<p>Even in the situation that the feature serving code is identical between the training and inference pipelines, it is common for the data itself to be different. For example, it is often most cost efficient for organizations to use low-latency key-value stores like redis or bigtable to serve features online but to use data warehousing solutions like hadoop or bigquery to manage features for offline model training. It is possible for substantial differences to exist between how data is written, stored, and accessed between these different tools.</p>

<p>Finally, even when the features themselves are identical, the systems for providing features at inference time may fail or timeout. This is particularly common for large distributed systems with tight latency constraints. Even if the ML system is engineered to handle these failures gracefully, these events can cause differences between the feature distributions at training and inference time.</p>

<h4 id="time-travel">Time travel</h4>

<p>Another most well known challenges with feature experimentation is time travel. Time travel arises when we use a feature that is computed at time t2 to train or evaluate a model on a sample that was derived at some time t1 != t2. This can skew the feature distribution and lead to mismatch between the training and inference feature distributions. This is particularly risky when t1 &lt; t2, since it is possible for the label to ‚Äúleak‚Äù into the feature distribution.</p>

<p>For example, suppose we are training a click prediction model, and one of the features in the model is the number of clicks that the user has performed in the last 30 days. Now suppose we use the value of this feature at time t2 to predict the probability of a click at t1 where t1 &lt; t2. The model will likely overindex on the importance of this feature, since the user‚Äôs decision to click at time t1 is already included in the value of the feature at time t2.</p>

<p>Time travel is easy to avoid when the set of features that we use is constant. We can simply log the feature set at prediction time, and then use the logged features for training and evaluation. However, we cannot use this strategy when we add a new feature or want to experiment with a new strategy for computing a feature. In these situations the only recourse may be to start logging the new features for a while before using them to train a model.</p>

<h4 id="feature-freshness">Feature freshness</h4>

<p>In most machine learning applications we can divide features into two categories:</p>
<ul>
  <li>Static features that change slowly and don‚Äôt need to be updated often (e.g. user age, text content, image content)</li>
  <li>Dynamic features that change quickly and rely on regular updates (e.g. last user action, today‚Äôs weather)</li>
</ul>

<p>If a model is trained to expect that dynamic features are computed with a 2-hour lag, then either system outages that increase that lag or performance improvements that reduce that lag can damage model performance.</p>

<h2 id="to-be-continued">To be continued</h2>

<p>That‚Äôs all for now. In our next post we will explore some of the challenges of A/B testing improvements to a machine learning system.</p>

:ET