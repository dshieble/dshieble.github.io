I"Ï"<script> 
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-82391879-1', 'auto');
  ga('send', 'pageview');

</script>

<p>When you think about the most important fields of mathematics for a data scientist to know, you‚Äôll almost certainly name calculus, probability/statistics, and linear algebra. These fields form the underpinnings of the most popular data analysis, signal processing and machine learning techniques. But in my experience, I‚Äôve found that there are a lot of other fields that are helpful to understand, such as the theory of computation.</p>

<p>As a data scientist, I write a lot of pretty complex programs. It can be challenging to reason about their behavior. I‚Äôve found that having learned the basic tenets of the theory of computation has dramatically improved my ability to reason about the code that I write.</p>

<p>The study of the theory of computation involves reading and writing a lot of proofs about problems and programs. Now it‚Äôs definitely possible for someone to write excellent code their entire life and never write a single proof. But I think that this is a shame. When you attempt to prove that an algorithm will work in all cases, you often discover bugs and flaws that would have been much more difficult to find later. In addition, proofs and code are actually very similar, and they complement and support one another. When you turn an idea into a program or a proof, you need to take a malleable and ambiguous concept in your mind and shape it into a concrete object. In doing so, you develop an extremely thorough understanding of the problem. I think that the exercise of reading and writing proofs has made me a stronger programmer.</p>

<h3 id="decidability">Decidability</h3>

<p><a href="https://en.wikipedia.org/wiki/Decidability_(logic)">Decidability</a> is a fancy word, but it expresses a pretty simple idea: if a problem is decidable, then we can write a computer program to solve it. More precisely, say that we have a decision problem \(D\) (a yes/no question on some set of inputs). If \(D\) is a decidable problem, there exists some algorithm \(A\) such that \(A(x)\) always produces the answer to \(D\) for input \(x\).</p>

<p>This may seem like a pretty ‚Äúout there‚Äù concept. After all, you‚Äôve probably never been writing code and run into an undecidable problem. But as it turns out, some of the most important problems in computer science are undecidable.</p>

<h3 id="the-halting-problem">The Halting Problem</h3>

<p>The <a href="https://en.wikipedia.org/wiki/Decidability_(logic)">halting problem</a> is probably the most famous undecidable problem. The problem is: given some computer program and some input to that program, determine whether the program will run forever or if it will terminate.</p>

<p>Now the first time you read this problem, it doesn‚Äôt seem that hard. We can look at the code? And the input!? And we don‚Äôt even need to predict the output or how long it will take, just whether it will run forever?? All we need to do is look for loops‚Ä¶and nested loops‚Ä¶and recursion‚Ä¶and follow them‚Ä¶and pretty soon we‚Äôll just be going through the program, which isn‚Äôt great news if the program may or may not run forever.</p>

<p>Okay, so we‚Äôre convinced this problem is pretty hard. But if we want to know whether it‚Äôs really undecidable, then we‚Äôll have to write a proof.</p>

<p>Like most decidability problems, the halting problem is easiest to solve with a proof by contradiction. That is, we assume that the problem is decidable, and then show that this leads us to a contradiction.</p>

<p>Here‚Äôs a sketch of the proof with python code:</p>

<p>Let‚Äôs say that the halting problem is decidable. Then we can write this program:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">does_halt</span><span class="p">(</span><span class="n">computer_program</span><span class="p">,</span> <span class="n">input_to_program</span><span class="p">):</span>
    <span class="s">"""
    Args:
        computer_program (function): Any function
        input_to_program (anything): Any input
    Returns:
        True if computer_program(input_to_program) terminates and False
        if computer_program(input_to_program) runs forever. 
    """</span>
    <span class="c1">#code code code
</span></code></pre></div></div>

<p>Let‚Äôs say mischievous friend sees our <code class="language-plaintext highlighter-rouge">does_halt</code> program, and he decides to write a program to trick it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">friend_program</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="s">"""
    Args:
        f (function): Any function
    """</span>
    <span class="c1">#Run the Halt program to see if f(f) will halt
</span>    <span class="k">if</span> <span class="n">does_halt</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>  <span class="c1">#If f(f) will halt, then loop forever
</span>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1">#If f(f) won't halt, then halt
</span>        <span class="k">return</span>

</code></pre></div></div>

<p>Notice that <code class="language-plaintext highlighter-rouge">friend_program</code> is completely written out. If the <code class="language-plaintext highlighter-rouge">does_halt</code> program works, then <code class="language-plaintext highlighter-rouge">friend_program</code> will work.</p>

<p>Now what happens when we run <code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code>? There are two cases:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code> will halt. Then <code class="language-plaintext highlighter-rouge">does_halt(friend_program, friend_program)</code> will return <code class="language-plaintext highlighter-rouge">True</code>. However, because of line 7 in <code class="language-plaintext highlighter-rouge">friend_program</code>, then <code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code> will run forever. So this is a contradiction.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code> will run forever. Then <code class="language-plaintext highlighter-rouge">does_halt(friend_program, friend_program)</code> will return <code class="language-plaintext highlighter-rouge">False</code>. However, because of line 10 in <code class="language-plaintext highlighter-rouge">friend_program</code>, then <code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code> will terminate. So this is a contradiction.</p>
  </li>
</ol>

<p>Because we reach a contradiction no matter how we assume <code class="language-plaintext highlighter-rouge">friend_program(friend_program)</code> will behave, <code class="language-plaintext highlighter-rouge">does_halt</code> cannot exist and the halting problem is undecidable.</p>

<h3 id="why-does-the-halting-problem-matter">Why does the halting problem matter?</h3>

<p>As we‚Äôll see in the next post, a lot of computational theory involves ‚Äúreductions‚Äù, or algorithms that can transform a solution to one problem into a solution for another.</p>

<p>Let‚Äôs say we find a problem that the halting problem reduces to. That is, we can transform a solution to that problem into a solution to the halting problem. Then we know that problem is not decidable, because we‚Äôve already proven the halting problem is undecidable.</p>

<p>As it happens, the halting problem ‚Äúreduces‚Äù to a lot of problems. This stack exchange <a href="http://cs.stackexchange.com/questions/32845/why-really-is-the-halting-problem-so-important">answer</a> has a bunch of great examples.</p>

<h3 id="other-resources">Other Resources</h3>

<p>If you liked this post, then you‚Äôll probably love <a href="http://www.cin.ufpe.br/~jjss/Introcuction%20to%20Theory%20of%20computation%20by%20Micheal%20Sipser%20Ist%20Ed..pdf">this book</a>. It‚Äôs an excellent resource that‚Äôs packed with examples and manages to effectively break down and explain some mind-bogglingly complex topics.</p>

<p>Also, stay tuned! Part 2 is coming soon!</p>
:ET